name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: main_db
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U testuser -d main_db"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    env:
      POSTGRES_URL_ROOT: postgres://testuser:testpass@127.0.0.1:5433/main_db_root?sslmode=disable
      POSTGRES_URL_BASIC_USAGE: postgres://testuser:testpass@127.0.0.1:5433/main_db_basic_usage?sslmode=disable
      POSTGRES_URL_WITH_MIGRATIONS: postgres://testuser:testpass@127.0.0.1:5433/main_db_with_migrations?sslmode=disable

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Wait for Postgres
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          for i in {1..30}; do
            if pg_isready -h 127.0.0.1 -p 5433 -U testuser -d main_db; then
              break
            fi
            echo "Waiting for Postgres..." && sleep 2
          done
          pg_isready -h 127.0.0.1 -p 5433 -U testuser -d main_db

      - name: Prepare databases (one per package)
        run: |
          for db in main_db_root main_db_basic_usage main_db_with_migrations; do
            if ! psql "postgres://testuser:testpass@127.0.0.1:5433/postgres?sslmode=disable" -tAc "SELECT 1 FROM pg_database WHERE datname='${db}'" | grep -q 1; then
              psql "postgres://testuser:testpass@127.0.0.1:5433/postgres?sslmode=disable" -c "CREATE DATABASE ${db}"
            fi
          done

      - name: Run tests (sequential per package)
        env:
          POSTGRES_URL_ROOT: ${{ env.POSTGRES_URL_ROOT }}
          POSTGRES_URL_BASIC_USAGE: ${{ env.POSTGRES_URL_BASIC_USAGE }}
          POSTGRES_URL_WITH_MIGRATIONS: ${{ env.POSTGRES_URL_WITH_MIGRATIONS }}
        run: |
          go version
          go mod download
          # Core library tests against dedicated DB
          POSTGRES_URL=${{ env.POSTGRES_URL_ROOT }} go test -v .
          # Basic usage example against its own DB
          POSTGRES_URL=${{ env.POSTGRES_URL_BASIC_USAGE }} go test -v ./examples/basic_usage/...
          # With migrations example against its own DB
          POSTGRES_URL=${{ env.POSTGRES_URL_WITH_MIGRATIONS }} go test -v ./examples/with_migrations/...


